<?php


namespace app\admin\controller;


use think\Db;
use think\Exception;

class Message extends Base
{

    public function _initialize()
    {
        $this->assign('meta_title', '消息管理');
        parent::_initialize(); // TODO: Change the autogenerated stub
    }

    public function index()
    {
        $message = model('Message');
        if(request()->isPost()){
            $page = request()->post('page', 1);
            $limit = request()->post('limit', 10);
            $offset = ($page - 1) * $limit;

            $title = request()->post('title');
            $base_type = request()->post('base_type');
            $is_permanent = request()->post('is_permanent');
            $strtime = request()->post('strtime');
            $endtime = request()->post('endtime');

            $map = [
                'A.base_type' => [['=', 1], ['=', 2], 'or'],
                'A.uid' => [['=', '0'], ['null', ''], 'or'],
                'A.status' => 1
            ];

            if(!empty($title)) {
                $map['A.title'] = ['like', "%{$title}%"];
            }

            if(is_numeric($base_type)) {
                $map['A.base_type'] = $base_type;
            }

            if(is_numeric($is_permanent)) {
                $map['A.is_permanent'] = $is_permanent;
            }

            if(!empty($strtime)) {
                $map['A.end_time'] = ['>=', strtotime($strtime)];
            }

            if(!empty($endtime)) {
                $map['A.end_time'] = ['<=', strtotime($endtime)];
            }

            if(!empty($strtime) && !empty($endtime)) {
                $map['A.end_time'] = ['between', [strtotime($strtime), strtotime($endtime)]];
            }

            $list = $message->alias('A')->where($map)->limit($offset, $limit)->order('A.id desc')->select();
            $count = $message->alias('A')->where($map)->count();
            //echo $message->getLastSql();exit();
            foreach ($list as $k => $v) {
                $v['key'] = $k + ($page - 1) * $limit + 1;
                $data[$k] = $v;
            }
            return json(['data' => [ 'count' => $count, 'list' => $list]], 200);
        }
        return view('', [
            'base_type' => $message->base_type
        ]);
    }

    public function create()
    {
        $message = model('Message');
        $MessageLink = model('MessageLink');
        if(request()->isPost()){
            $_post = request()->post();
            $_post['subdivide_type'] = $_post['base_type'] == 1 ? 1: 2;
            if(!empty($_post['end_time']) && $_post['is_permanent'] == 0){
                $_post['end_time'] = strtotime($_post['end_time']);
            } else {
                unset($_post['end_time']);
            }
            $save = [
                'link_type' => $_post['link_type'],
                'url' => $_post['url'.$_post['link_type']]
            ];

            $state = false;
            Db::startTrans();
            try {
                $message->allowField(true)->isUpdate(false)->save($_post);
                $message_id = $message->id ;
                $save['msg_id'] = $message_id;
                if(!empty($_post['url1']) ){
                    $MessageLink->allowField(true)->isUpdate(false)->data([
                        'msg_id' => $message_id,
                        'link_type' => 1,
                        'url' => $_post['url1']
                    ], true)->save();
                }

                if(!empty($_post['url2']) ){
                    $MessageLink->allowField(true)->isUpdate(false)->data([
                        'msg_id'    => $message_id,
                        'link_type' => 2,
                        'url'       => $_post['url2']
                    ], true)->save();
                }
                $MessageLink->allowField(true)->isUpdate(false)->data($save, true)->save();

                Db::commit();
                $state = true;
            }catch (\Exception $e) {
                Db::rollback();
                $state = false;
            }
            if($state !== false) {
                return success_json('数据提交成功');
            } else {
                return error_json('数据提交失败');
            }
        }
        return view('', [
            'link_type' => $MessageLink->link_type
        ]);
    }

    public function edit()
    {
        $message = model('Message');
        $messageLink = model('MessageLink');
        $id = request()->param('id');
        if(request()->isPost()) {
            $_post = request()->post();
            $_post['subdivide_type'] = $_post['base_type'] == 1 ? 1: 2;
            if(!empty($_post['end_time']) && $_post['is_permanent'] == 0){
                $_post['end_time'] = strtotime($_post['end_time']);
            } else {
                unset($_post['end_time']);
            }

            Db::startTrans();
            try {
                if(!empty($_post['url1'])){
                    $count1 = $messageLink->where(['link_type' => 1, 'msg_id'=>$id,'status'=>1])->count();
                    if($count1 > 0) {
                        $messageLink->isUpdate(true)->save(['url'=>$_post['url1']], ['link_type' => 1, 'msg_id'=>$id, 'status'=>1]);
                    }else {
                        $messageLink->allowField(true)->isUpdate(false)->data([
                            'msg_id'=>$id,
                            'link_type' => 1,
                            'url' => $_post['url1'],
                        ], true)->save();
                    }
                }else{
                    $messageLink->isUpdate(true)->save(['status' => 0], ['link_type' => 1, 'msg_id' => $id, 'status' => 1]);
                }



                if(!empty($_post['url2'])) {
                    $count2 = $messageLink->where(['link_type' => 2, 'msg_id' => $id, 'status' => 1])->count();
                    if ($count2 > 0) {
                        $messageLink->isUpdate(true)->save(['url' => $_post['url2']], ['link_type' => 2, 'msg_id' => $id, 'status' => 1]);
                    } else {
                        $messageLink->allowField(true)->isUpdate(false)->data([
                            'msg_id'=>$id,
                            'link_type' => 2,
                            'url' => $_post['url2'],
                        ], true)->save();
                    }
                }else{
                    $messageLink->where(['link_type' =>2, 'msg_id' => $id, 'status' => 1])->update(['status' => 0]);
                }

                $message->isUpdate(true)->save($_post, ['id'=>$id]);
                $messageLink->where(['msg_id'=>$id, 'link_type' => [['=', 3], ['=', 4], 'or']])->update([
                    'link_type' => $_post['link_type'],
                    'url' => $_post['url'.$_post['link_type']]
                ]);

                Db::commit();
                $state = true;
            }catch (\Exception $e) {
                Db::rollback();
                $state = false;
            }

            if($state !== false) {
                return success_json('数据提交成功');
            } else {
                return error_json('数据提交失败');
            }

        }
        $info = $message->where(['id'=>$id])->find();
        $messagelinkInfo = $messageLink->where(['msg_id' => $info['id'], 'status' => 1, 'link_type' => [['=', 3], ['=', 4], 'or'] ])->find();

        if($messagelinkInfo){
            $info['link_type'] = $messagelinkInfo['link_type'];
            $info['url'] = $messagelinkInfo['url'];
        }
        $messagelinkInfo1 = $messageLink->where(['msg_id' => $info['id'], 'status' => 1, 'link_type' => 1 ])->find();
        $messagelinkInfo2 = $messageLink->where(['msg_id' => $info['id'], 'status' => 1, 'link_type' => 2 ])->find();

        return view('', [
            'info' => $info,
            'link_type' => model('MessageLink')->link_type,
            'messagelinkInfo1' => $messagelinkInfo1,
            'messagelinkInfo2' => $messagelinkInfo2,
        ]);
    }

    public function delete()
    {
        $message = model('Message');
        $messageLink = model('MessageLink');
        $id = request()->param('id');
        Db::startTrans();
        try {
            $message->allowField(true)->isUpdate(true)->save(['status'=>0], ['id'=>$id]);
            $messageLink->allowField(true)->isUpdate(true)->save(['status'=>0], ['msg_id'=>$id]);
            Db::commit();
            $state = true;
        }catch (\Exception $e) {
            Db::rollback();
            $state = false;
        }
        if($state !== false) {
            return success_json('数据提交成功');
        } else {
            return error_json('数据提交失败');
        }
    }

}