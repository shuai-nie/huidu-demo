<?php


namespace app\admin\controller;


use think\Db;
use think\Exception;

class Message extends Base
{

    public function _initialize()
    {
        $this->assign('meta_title', '消息管理');
        parent::_initialize(); // TODO: Change the autogenerated stub
    }

    public function index()
    {
        $message = model('Message');
        if(request()->isPost()){


            $page = request()->post('page', 1);
            $limit = request()->post('limit', 10);
            $offset = ($page - 1) * $limit;

            $map = ['base_type'=>['=', '1,2', 'or']];
            $list = $message->alias('A')->where($map)->limit($offset, $limit)->order('A.id desc')->select();
            $count = $message->alias('A')->where($map)->count();
            foreach ($list as $k => $v) {
                $v['key'] = $k+ ($page-1)*$limit+1;
                $data[$k] = $v;
            }
            return json(['data' => [ 'count' => $count, 'list' => $list]], 200);
        }
        return view('', [
            'base_type' => $message->base_type
        ]);
    }

    public function create()
    {
        $message = model('Message');
        $MessageLink = model('MessageLink');
        if(request()->isPost()){
            $_post = request()->post();
            $_post['subdivide_type'] = $_post['base_type'] == 1 ? 1: 2;
            if(!empty($_post['end_time']) && $_post['is_permanent'] == 1){
                $_post['end_time'] = strtotime($_post['end_time']);
            } else {
                unset($_post['end_time']);
            }
            $save = [
                'link_type' => $_post['link_type'],
                'url' => $_post['url'.$_post['link_type']]
            ];

            $state = false;
            Db::startTrans();
            try {
                $message->allowField(true)->isUpdate(false)->save($_post);
                $save['msg_id'] = $message->id;
                $MessageLink->allowField(true)->isUpdate(false)->save($save);
                Db::commit();
                $state = true;
            }catch (\Exception $e) {
                Db::rollback();
                $state = false;
            }
            if($state !== false) {
                return success_json('数据提交成功');
            } else {
                return error_json('数据提交失败');
            }
        }
        return view('', [
            'link_type' => $MessageLink->link_type
        ]);
    }

    public function edit()
    {
        $message = model('Message');
        $messageLink = model('MessageLink');
        $id = request()->param('id');
        if(request()->isPost()) {
            $_post = request()->post();
            $_post['subdivide_type'] = $_post['base_type'] == 1 ? 1: 2;
            if(!empty($_post['end_time']) && $_post['is_permanent'] == 1){
                $_post['end_time'] = strtotime($_post['end_time']);
            } else {
                unset($_post['end_time']);
            }
            $save = [
                'link_type' => $_post['link_type'],
                'url' => $_post['url'.$_post['link_type']]
            ];

            $state = false;
            Db::startTrans();
            try {
                $message->allowField(true)->isUpdate(true)->save($_post, ['id'=>$id]);
                $messageLink->allowField(true)->isUpdate(true)->save($save, ['msg_id'=>$id]);
                Db::commit();
                $state = true;
            }catch (\Exception $e) {
                Db::rollback();
                $state = false;
            }
            if($state !== false) {
                return success_json('数据提交成功');
            } else {
                return error_json('数据提交失败');
            }

        }
        $info = $message->where(['id'=>$id])->find();
        $messagelinkInfo = $messageLink->where(['msg_id'=>$info['id']])->find();
        if($messagelinkInfo){
            $info['link_type'] = $messagelinkInfo['link_type'];
            $info['url'] = $messagelinkInfo['url'];
        }
        return view('', [
            'info' => $info,
            'link_type' => $messageLink->link_type
        ]);
    }

    public function delete()
    {
        $message = model('Message');
        $messageLink = model('MessageLink');
        $id = request()->param('id');
//        $state = false;
        Db::startTrans();
        try {
            $message->allowField(true)->isUpdate(true)->save(['status'=>0], ['id'=>$id]);
            $messageLink->allowField(true)->isUpdate(true)->save(['status'=>0], ['msg_id'=>$id]);
            Db::commit();
            $state = true;
        }catch (\Exception $e) {
            Db::rollback();
            $state = false;
        }
        if($state !== false) {
            return success_json('数据提交成功');
        } else {
            return error_json('数据提交失败');
        }
    }

}